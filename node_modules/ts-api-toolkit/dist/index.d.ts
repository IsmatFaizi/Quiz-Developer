import { Options as RedaxiosOptions } from 'redaxios';
interface Options {
    tokenKey: string;
    baseUrl: string;
    authSchema: string;
}
declare type HttpMethod = 'get' | 'delete' | 'head' | 'options' | 'post' | 'put' | 'patch';
declare const _default: {
    (resource: string, method: HttpMethod, config: RedaxiosOptions, data?: Record<string, unknown> | undefined): Promise<import("redaxios").Response<any>>;
    getToken: () => string | null;
    saveToken(token: string): void;
    destroyToken(): void;
    get(resource: string, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    delete(resource: string, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    head(resource: string, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    options(resource: string, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    post(resource: string, data: Record<string, unknown>, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    put(resource: string, data: Record<string, unknown>, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    patch(resource: string, data: Record<string, unknown>, config?: RedaxiosOptions | undefined): Promise<import("redaxios").Response<any>>;
    create: (options?: Partial<Options> | undefined) => any;
};
export default _default;
